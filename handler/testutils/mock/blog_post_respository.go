// Code generated by mockery v2.40.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/blog-platform/handler/internal/model"

	uuid "github.com/google/uuid"
)

// BlogPostRepository is an autogenerated mock type for the BlogPostRepository type
type BlogPostRepository struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: cxt, post
func (_m *BlogPostRepository) CreatePost(cxt context.Context, post *model.Post) (*model.Post, error) {
	ret := _m.Called(cxt, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) (*model.Post, error)); ok {
		return rf(cxt, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) *model.Post); ok {
		r0 = rf(cxt, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Post) error); ok {
		r1 = rf(cxt, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: cxt, postID
func (_m *BlogPostRepository) DeletePost(cxt context.Context, postID uuid.UUID) bool {
	ret := _m.Called(cxt, postID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(cxt, postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetPost provides a mock function with given fields: cxt, postID
func (_m *BlogPostRepository) GetPost(cxt context.Context, postID uuid.UUID) (*model.Post, error) {
	ret := _m.Called(cxt, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Post, error)); ok {
		return rf(cxt, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Post); ok {
		r0 = rf(cxt, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(cxt, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: cxt, post
func (_m *BlogPostRepository) UpdatePost(cxt context.Context, post *model.Post) (*model.Post, error) {
	ret := _m.Called(cxt, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) (*model.Post, error)); ok {
		return rf(cxt, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) *model.Post); ok {
		r0 = rf(cxt, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Post) error); ok {
		r1 = rf(cxt, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlogPostRepository creates a new instance of BlogPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogPostRepository {
	mock := &BlogPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
